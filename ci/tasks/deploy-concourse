#!/usr/bin/env bash

set -eu

: ${DEPLOYMENT_NAME:?}
: ${DEPLOYMENT_CONFIG_PATH:?}
: ${CONCOURSE_SECRETS:?}
: ${BOSH_ENVIRONMENT:?}
: ${BOSH_CLIENT:?}
: ${BOSH_CLIENT_SECRET:?}
: ${BOSH_CA_CERT:?}
: ${JUMPBOX_HOST:?}
: ${JUMPBOX_SSH_USER:?}
: ${JUMPBOX_SSH_KEY:?}
: ${CONCOURSE_EXTERNAL_URL:?}
: ${CONCOURSE_BASIC_AUTH_USERNAME:?}
: ${CONCOURSE_BASIC_AUTH_PASSWORD:?}
: ${CONCOURSE_TEAMS:?}

source deployments-src/ci/utils

terraform_metadata="$( realpath terraform/metadata )"
stemcell_version="$( cat stemcell/version )"
postgres_release_version="$( cat postgres-release/version )"
concourse_version="$( cat concourse-and-garden/tag | tr -d v )"

setup_ssh_tunnel "$JUMPBOX_SSH_KEY" "$JUMPBOX_SSH_USER@$JUMPBOX_HOST"

[[ "$IGNORE_UPLOAD_ERRORS" == "true" ]] && set +e

echo "Uploading Concourse release..."
bosh2 -n --tty upload-release $( ls concourse-and-garden/concourse-*.tgz | tail -n1 )

echo "Uploading Postgres release..."
bosh2 -n --tty upload-release postgres-release/*.tgz

echo "Uploading Concourse Windows release..."
bosh2 -n --tty upload-release concourse-windows-worker/*.tgz

echo "Uploading Garden release..."
bosh2 -n --tty upload-release concourse-and-garden/garden-runc-*.tgz

echo "Uploading ulimit release..."
( cd ulimit ; bosh2 -n --tty upload-release )

echo "Uploading Windows Utilities stemcell..."
( cd windows-utilities ; rm -f config/private.yml ; bosh2 -n --tty upload-release )

echo "Uploading stemcell..."
bosh2 -n --tty upload-stemcell stemcell/*.tgz

echo "Uploading Windows stemcell..."
bosh2 -n --tty upload-stemcell windows-stemcell/*.tgz

echo "Uploading Postgres release..."
bosh2 -n --tty upload-release postgres-release/release.tgz

set -e

create_worker_ops_file() {
  local concourse_teams=${1?'Concourse teams is required.'}

  touch worker-ops.yml

  for ((i = 0 ; i < $(echo "$concourse_teams" | jq -r length) ; i++ )); do
    team="$(echo "$concourse_teams" | jq -r ".[$i]")"

    # if there is 'vm_type' create worker for team
    if [[ -n "$(echo "$team" | jq -r .vm_type)" ]]; then
      team_name="$(echo "$team" | jq -r .name)"
      bosh2 int \
        -l <( echo "$team" | jq '. + {"team": .name}' ) \
        deployments-src/concourse/worker-ops.yml >> worker-ops.yml
    fi

    # if 'worker_public_key' add to 'tsa.team_authorized_keys'
    if [[ -n "$(echo "$team" | jq -r .worker_public_key)" ]]; then
      bosh2 int \
        -l <( echo "$team" | jq '. + {"team": .name}' ) \
        deployments-src/concourse/team-authorized-public-key-ops.yml >> worker-ops.yml
    fi
  done

  realpath worker-ops.yml
}

echo "Building Concourse Workers manifest..."
worker_ops_path="$( create_worker_ops_file "$CONCOURSE_TEAMS" )"

pushd deployments-src > /dev/null
  echo "Deploying Concourse..."
  bosh2 -n --tty deploy \
    -l <(echo "${CONCOURSE_SECRETS}") \
    -v concourse_external_url=${CONCOURSE_EXTERNAL_URL} \
    -v concourse_basic_auth_username=${CONCOURSE_BASIC_AUTH_USERNAME} \
    -v concourse_basic_auth_password=${CONCOURSE_BASIC_AUTH_PASSWORD} \
    -v stemcell_version="'${stemcell_version}'" \
    -v concourse_version="'${concourse_version}'" \
    -v postgres_version="'${postgres_release_version}'" \
    -d "${DEPLOYMENT_NAME}" \
    -o "$worker_ops_path" \
    --vars-store="you-really-need-this-flag-but-not-this-file.yml" \
    "${DEPLOYMENT_CONFIG_PATH}"
  echo "Successfully deployed Concourse!"
popd > /dev/null
